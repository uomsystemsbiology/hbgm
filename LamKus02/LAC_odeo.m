
function [mtty] = LAC_odeo(mttx,mttu,mttt,mttpar);
## [mtty] = LAC_odeo(mttx,mttu,mttt,mttpar);
## System LAC, representation odeo, language m; 
## File LAC_odeo.m; 
## Generated by MTT on Wed Jan 14 13:57:52 AEDT 2015; 

## Horrible fudge to make mtt_m2p work
global ...
mtt_no_globals ;

## Parameters 
   k_lac 	= mttpar(1);
   k_laco 	= mttpar(2);
   k_pep 	= mttpar(3);
   k_pyr 	= mttpar(4);
   rt 	= mttpar(5);
   k_eno 	= mttpar(6);
   k_fout 	= mttpar(7);
   k_ldh 	= mttpar(8);
   k_pk 	= mttpar(9);
   rho_eno 	= mttpar(10);
   rho_fout 	= mttpar(11);
   rho_ldh 	= mttpar(12);
   rho_pk 	= mttpar(13);
   v_eno 	= mttpar(14);
   v_fout 	= mttpar(15);
   v_ldh 	= mttpar(16);
   v_pk 	= mttpar(17);

## States 
mttx1 = mttx(1) ;
mttx2 = mttx(2) ;
mttx3 = mttx(3) ;
mttx4 = mttx(4) ;

## Inputs 
mttu1 = mttu(1);
mttu2 = mttu(2);
mttu3 = mttu(3);
mttu4 = mttu(4);

## Unknown Inputs 

   mtty = zeros(4,1);

## BEGIN Code

## Code
  mtty(1) = (v_eno*( - k_pep*mttx3 + 1))/(k_eno + k_pep*mttx3*rho_eno - rho_eno \
 + 1);
  mtty(2) = (v_fout*(k_lac*mttx1 - k_laco*mttx2))/(k_fout - k_lac*mttx1* \
rho_fout + k_lac*mttx1 + k_laco*mttx2*rho_fout);
  mtty(3) = (v_ldh*( - k_lac*mttx1 + k_pyr*mttx4))/(k_lac*mttx1*rho_ldh + k_ldh \
 - k_pyr*mttx4*rho_ldh + k_pyr*mttx4);
  mtty(4) = (v_pk*( - k_pep*mttx3 + k_pyr*mttx4))/(k_pep*mttx3*rho_pk - k_pep* \
  mttx3 - k_pk - k_pyr*mttx4*rho_pk);
## END Code
endfunction

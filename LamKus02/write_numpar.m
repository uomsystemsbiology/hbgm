fid = fopen("LamKus02_numpar.txt","w");

fprintf(fid,"## LamKus02_numpar.txt generated by write_numpar.m on %s\n\n", date);
fprintf(fid,"#############################\n")
fprintf(fid,"## Thermodynamic constants ##\n")
fprintf(fid,"#############################\n")

fprintf(fid,"RT \t= 8.3144621*300;\n");

for i=1:length(bg.species)
  fprintf(fid,"K_%s \t= %g;\n", bg.species{i}, bg.K_c(i)); 
endfor


fprintf(fid,"#############################\n")
fprintf(fid,"## Rate constants ##\n")
fprintf(fid,"#############################\n")

## Find algebraic expressions for Km_f and Km_r
unit_K = "1";			# Km in mM.
unit_V = 1000;			# V_max in M/min
for i=1:length(bg.reaction)
  reac_name = bg.reaction{i};
  
  [s,p,n_s,n_p] = stoic2reactants(reac_name,bg); # Names of sub. and prod.

  exp_format = "%s*(%s*%s.Km_%s)%s";
  Km_f_exp = sprintf("%s.Km_f = 1",reac_name);
  for i=1:length(s)
      if n_s(i)>1
	 expo = sprintf("^%i");
      else
	  expo = "";
      endif
    Km_f_exp = sprintf(exp_format,Km_f_exp,unit_K,reac_name,s{i},expo);
  endfor
  Km_f_exp = sprintf("%s;",Km_f_exp);
  Km_f_exp;
  eval(Km_f_exp);

  Km_r_exp = sprintf("%s.Km_r = 1",reac_name);
  for i=1:length(p)
      if n_p(i)>1
	 expo = sprintf("^%i",n_p(i));
      else
	  expo = "";
      endif
    Km_r_exp = sprintf(exp_format,Km_r_exp,unit_K,reac_name,p{i},expo);
  endfor
  Km_r_exp = sprintf("%s;",Km_r_exp);
  Km_r_exp;
  eval(Km_r_exp);

  ## Evaluate the BG style parameters
  val = eval(sprintf("%s;",  reac_name)); # Extract

  V_max_f = unit_V*val.v_max_f;
  V_max_r = unit_V*val.v_max_r;
  [val.v_max,val.rho_v,val.k_v] = ...
  convertParameters (V_max_f,V_max_r,val.Km_f,val.Km_r,val.K_eq,val.K_r);
  ##convertParameters (val.v_max_f,val.v_max_r,val.Km_f,val.Km_r,val.K_eq,1);
  eval(sprintf("%s = val;",  reac_name)); # Return

### MA version
## disp("Clip rho ")
 
##  if val.rho_v<0.1
##    val.rho_v=0.1;
##  endif

##  if val.rho_v>0.9
##    val.rho_v=0.9;
##  endif
 
  fprintf(fid,"v_%s \t= %g;\n", reac_name, val.v_max);
  fprintf(fid,"k_%s \t= %g;\n", reac_name, val.k_v);
  fprintf(fid,"rho_%s \t= %g;\n", reac_name, val.rho_v);

## Rewrite values
  eval(sprintf("%s = val;", reac_name));
endfor
fclose(fid);


## fid = fopen("LamKus02_initial.m","w");

## fprintf(fid,"#############################\n")
## fprintf(fid,"## Initial states ##\n")
## fprintf(fid,"#############################\n")
## for i=1:ns_sbml
##   fprintf(fid,"x_%s \t= %s;\n", sname_sbml{i}, x_0{i}); 
## endfor

## fprintf(fid,"#############################\n")
## fprintf(fid,"## Missing initial states ##\n")
## fprintf(fid,"#############################\n")
## x_missing = 1;
## for i=I_missing
##   fprintf(fid,"x_%s \t= %g;\n", sname_bg{i}, x_missing); 
## endfor

## fclose(fid);
